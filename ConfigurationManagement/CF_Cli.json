{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"CF_Cli.json extends on CF_EC2Base.json",
  "Parameters":{
    "KeyName":{
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Default":"mikeaws1",
      "ConstraintDescription":"must be the name of an existing EC2 KeyPair."
    },
    "InstanceType":{
      "Description":"WebServer EC2 instance type",
      "Type":"String",
      "Default":"t2.micro",
      "AllowedValues":[
        "t1.micro",
        "t2.micro"
      ],
      "ConstraintDescription":"must be a valid EC2 instance type."
    },
    "SSHLocation":{
      "Description":"The IP address range that can be used to SSH to the EC2 instances",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"0.0.0.0/0",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings":{
    "AWSInstanceType2Arch":{
      "t1.micro":{
        "Arch":"PV64"
      },
      "t2.micro":{
        "Arch":"HVM64"
      }
    },
    "AWSRegionArch2AMI":{
      "us-east-1":{
        "PV64":"ami-d4f7ddbe",
        "HVM64":"ami-8fcee4e5"
      }
    }
  },
  "Resources":{
    "Server":{
      "Type":"AWS::EC2::Instance",
      "Metadata":{
        "AWS::CloudFormation::Init":{
          "configSets":{
            "install_all":[
              "install_core",
              "install_log",
              "install_cfn",
              "install_app"
            ],
            "update_all":[
              "update"
            ]
          },
          "install_core":{
            "packages":{
              "yum":{
                "git":[
                  
                ],
                "httpd":[
                  
                ],
                "php":[
                  
                ]
              }
            },
            "sources":{
              "/home/ec2-user/DevOpsInfrastructure":"https://github.com/mike-lam2/DevOpsInfrastructure/tarball/master"
            },
            "files":{
              "/etc/sysconfig/bash-prompt-xterm":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "echo -ne \"\\033]0;${USER}@",
                      {
                        "Ref":"AWS::StackName"
                      },
                      ":${PWD/#$HOME/~}\\007\"",
                      "\n"
                    ]
                  ]
                },
                "mode":"0555",
                "owner":"root",
                "group":"root"
              }
            },
            "commands":{
              "010-core-bash_profile":{
                "command":"sudo cp DevOpsInfrastructure/ConfigurationManagement/.bash_profile .bash_profile",
                "cwd":"/home/ec2-user/",
                "ignoreErrors":"true"
              }
            },
            "services":{
              "sysvinit":{
                "httpd":{
                  "enabled":"true",
                  "ensureRunning":"true"
                }
              }
            }
          },
          "install_cfn":{
            "files":{
              "/etc/cfn/cfn-hup.conf":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref":"AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref":"AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode":"000400",
                "owner":"root",
                "group":"root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                "content":{
                  "Fn::Join":[
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.Server.Metadata.AWS::CloudFormation::Init\n",
                      "action=/home/ec2-user/updateStack.sh\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "commands":{
              "010-set-cfn-log":{
                "command":"sudo  ln -s /etc/cfn /var/www/html/cfn",
                "ignoreErrors":"true"
              },
              "0015-chmod-html":{
                "command":"sudo chmod -R a+r *",
                "cwd":"/etc/cfn",
                "ignoreErrors":"true"
              }
            },
            "services":{
              "sysvinit":{
                "cfn-hup":{
                  "enabled":"true",
                  "ensureRunning":"true",
                  "files":[
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "install_log":{
            "commands":{
              "010-set-log":{
                "command":"sudo  ln -s /var/log /var/www/html/log",
                "ignoreErrors":"true"
              }
            }
          },
          "install_app":{
            "comments":"nothing to install just for the cli"
          },
          "update":{
            "commands":{
              "000-start-update":{
                "command":"sudo echo \"start update\" >> result.txt",
                "cwd":"/home/ec2-user/",
                "ignoreErrors":"true"
              }
            }
          }
        }
      },
      "Properties":{
        "InstanceType":{
          "Ref":"InstanceType"
        },
        "SecurityGroups":[
          {
            "Ref":"InstanceSecurityGroup"
          }
        ],
        "KeyName":{
          "Ref":"KeyName"
        },
        "ImageId":{
          "Fn::FindInMap":[
            "AWSRegionArch2AMI",
            {
              "Ref":"AWS::Region"
            },
            {
              "Fn::FindInMap":[
                "AWSInstanceType2Arch",
                {
                  "Ref":"InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":{
              "Ref":"AWS::StackName"
            }
          }
        ],
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                "         --resource Server ",
                "         --configsets install_all ",
                "         --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                "         --resource Server ",
                "         --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n",
                "echo var >> /var/test.txt\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy":{
        "ResourceSignal":{
          "Timeout":"PT15M"
        }
      }
    },
    "InstanceSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Enable SSH access via port 22",
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          }
        ]
      }
    }
  },
  "Outputs":{
    "PublicIP":{
      "Description":"Public IP address of the newly created EC2 instance",
      "Value":{
        "Fn::GetAtt":[
          "Server",
          "PublicIp"
        ]
      }
    },
    "WebsiteLogURL":{
      "Description":"log Website",
      "Value":{
        "Fn::Join":[
          "",
          [
            "http://",
            {
              "Fn::GetAtt":[
                "Server",
                "PublicIp"
              ]
            },
            "/log/"
          ]
        ]
      }
    },
    "WebsiteCfnURL":{
      "Description":"cfn Website",
      "Value":{
        "Fn::Join":[
          "",
          [
            "http://",
            {
              "Fn::GetAtt":[
                "Server",
                "PublicIp"
              ]
            },
            "/cfn/"
          ]
        ]
      }
    },
    "InstanceId":{
      "Description":"InstanceId of the newly created EC2 instance",
      "Value":{
        "Ref":"Server"
      }
    },
    "AZ":{
      "Description":"Availability Zone of the newly created EC2 instance",
      "Value":{
        "Fn::GetAtt":[
          "Server",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS":{
      "Description":"Public DNSName of the newly created EC2 instance",
      "Value":{
        "Fn::GetAtt":[
          "Server",
          "PublicDnsName"
        ]
      }
    }
  }
}